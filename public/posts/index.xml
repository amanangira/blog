<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My New Hugo Site</title>
    <link>http://example.org/posts/</link>
    <description>Recent content in Posts on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Jul 2023 19:44:05 +0530</lastBuildDate><atom:link href="http://example.org/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go Concurrency 1.1 - Sync Package | WaitGroup &amp; Mutex</title>
      <link>http://example.org/posts/go/concurrency/sync-package-1-dot-1/</link>
      <pubDate>Fri, 21 Jul 2023 19:44:05 +0530</pubDate>
      
      <guid>http://example.org/posts/go/concurrency/sync-package-1-dot-1/</guid>
      <description>Memory access synchronisation is one of the popular ways to achieve concurrency in various languages. Sync package is one of the major difference between these languages and Go. The package provides you new set of concurrency primitives with wide abilities on top of the memory access synchronisation primitives. I am going to briefly talk about some of the commonly used tools from this package.
WaitGroup It is an excellent abstraction to wait for a set of Go routines when you either don&amp;rsquo;t care about the result or have other ways to collect the result</description>
    </item>
    
  </channel>
</rss>
